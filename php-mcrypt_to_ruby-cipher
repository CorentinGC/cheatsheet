### PHP
function encrypt($plain_text, $key)
    {
        $key = str_pad($key, 32, "\0");

        $plain_text = trim( $plain_text );
        # create a random IV to use with CBC encoding
        $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
        $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);

        # creates a cipher text compatible with AES (Rijndael block size = 128)
        # to keep the text confidential
        # only suitable for encoded input that never ends with value 00h (because of default zero padding)
        $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key,
            $plain_text, MCRYPT_MODE_CBC, $iv);

        # prepend the IV for it to be available for decryption
        $ciphertext = $iv . $ciphertext;

        # encode the resulting cipher text so it can be represented by a string
        $sResult = base64_encode($ciphertext);
        return trim( $sResult );
    }


### Ruby
CIPHER_METHOD = 'AES-256-CBC' # RIJNDAEL 128 CBC (AES-256-CBC) 

def decrypt(str,key)
    data = Base64.decode64(str.strip)

    cipher = OpenSSL::Cipher.new(CIPHER_METHOD)
    cipher.decrypt
    cipher.key = key.ljust(cipher.key_len, "\0")
    cipher.iv = data[0..(cipher.iv_len-1)]
    data_body = data[cipher.iv_len..-1]

    cipher.padding = 0
    plain = cipher.update(data_body)

    plain.sub(/\0*\Z/, '').force_encoding('utf-8')
end
